---
layout: post
title: 比较几种基本排序（一）
description: 排序方法多种多样，可以分为比较排序和非比较排序，比较排序包括了快速排序、堆排序、归并排序、插入排序、选择排序、冒泡排序，非比较排序包括了基数排序、计数排序、桶排序。
keywords: Comparison sort
---
##一.比较排序算法的时间复杂度

一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))，称O(f(n))为算法的渐进时间复杂度(O是数量级的符号 )，简称**时间复杂度**。

###1.选择排序

**选择排序**（Selection sort）是一种简单直观的排序算法。它的工作原理如下：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
{%highlight c linenos%}
#include <stdio.h>
void xuanze(int *a)
{
    int i,j,m,t;
    for(i=0;i<10;i++){
        m=a[i];
        t=i;
        for(j=i+1;j<10;j++)
        {
            if(m<a[j])
            {
                m=a[j];
                t=j;
            }
        }
        a[t]=a[i];
        a[i]=m;
    }
    for(i=0;i<10;i++)
    {
        printf("%d ",a[i]);
    }
}

int main(void)
{
    int a[10];
    int i;
    for(i=0;i<10;i++)
        scanf("%d",&a[i]);
    xuanze(a);
    return 0;
}
{%endhighlight%}
**时间复杂度**：选择排序中5-18行存在嵌套循环，其中10-14行运行的次数为an^2，5-18行的第一层for循环中语句运行的次数为bn，那么嵌套循环中时间为an^2+bn+c，显然时间复杂度`T(n)=O(n^2)`。

###2.冒泡排序

**冒泡排序**（英语：Bubble Sort，台湾另外一种译名为：泡沫排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。

{%highlight c linenos%}
#include <stdio.h>
void maopao(int *a)
{
    int i,j,t;
    for(i=0;i<10;i++)
        for(j=9;j>i;j--)
            if(a[j]<a[j-1])
            {
                t=a[j];
                a[j]=a[j-1];
                a[j-1]=t;
            }
    for(i=0;i<10;i++)
        printf("%d ",a[i]);
}

int main(void)
{
    int a[10];
    int i;
    for(i=0;i<10;i++)
        scanf("%d",&a[i]);
    maopao(a);
    return 0;
}
{%endhighlight%}

**时间复杂度**：和选择排序一样，冒泡排序对n个项目需要`O(n^2)`的比较次数，且可以原地排序。尽管这个算法是最简单了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的。

##3.插入排序

**插入排序**（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
{%highlight c linenos%}
#include <stdio.h>
void charu(int *a)
{
    int i,j,x,key;
    for(i=0;i<9;i++)
    {
        key=a[i+1];
        j=i;
        while(j>=0&&a[j]>key){
            a[j+1]=a[j];
            j--;
        }
        a[j+1]=key;
    }
    for(i=0;i<10;i++)
    {
        printf("%d ",a[i]);
    }
}

int main(void)
{
    int a[10];
    int i;
    for(i=0;i<10;i++)
        scanf("%d",&a[i]);
    charu(a);
    return 0;
}
{%endhighlight%}
**时间复杂度**：如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需(n-1)次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。插入排序的赋值操作是比较操作的次数减去(n-1)次。平均来说插入排序算法复杂度为`O(n^2)`。

##4.归并排序

**归并排序**是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并过程为：比较a[i]和a[j]的大小，若a[i]≤a[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素a[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。归并排序的算法我们通常用递归实现，先把待排序区间[s,t]以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间[s,t]。
{%highlight c linenos%}
#include<stdio.h>
void merge_sort(int *a,int *b,int length)
{
    if(length==0)
        return;
    merge_sort(a,a+length/2,length/2);
    merge_sort(b,b+length/2,length/2);
    int i=0,j=0,k=0,len;
    int c[length*2];
    len=length;
        while(i<len&&j<len)
        {
            if(a[i]<b[j])
            {
                c[k]=a[i];
                i++;
                k++;
            }
            else
            {
                c[k]=b[j];
                j++;
                k++;
            }
        }
    if(i==len)
    {
        for(i=0;i<k;i++)
            a[i]=c[i];
    }
    else
    {
        for(j=i;j<len;j++,k++)
            c[k]=a[j];
        for(i=0;i<k;i++)
            a[i]=c[i];
    }
}

int main(void)
{
    int a[8];
    int i;
    for(i=0;i<8;i++)
        scanf("%d",&a[i]);
    merge_sort(&a[0],&a[4],4);
    for(i=0;i<8;i++)
        printf("%d ",a[i]);
    return 0;
}
{%endhighlight%}
**时间复杂度**：从代码中可以看出只存在单层循环，11行、28行和33行，总共的时间复杂度为cn。而6、7行存在两个递归函数，时间复杂度为T(n/2)。所以总的复杂度T(n)=2T(n/2)+cn,根据递归树或者主方法计算知时间复杂度为O(nlgn).  
下面使用**主方法**计算：对于一个递归实现的分治算法，其时间复杂度表示为:  
`T(n) = aT(n/b)+h(n)`  
其中，a>=1; b>1; h(n)是不参与递归部分的时间复杂度。  
比较n^log b (a)与O(h(n)) 的大小：  
若n^log b (a)= O(h(n)) ：该方法的复杂度为  O(h(n)*log(n))  
若n^log b (a)< O(h(n)) ：该方法的复杂度为  O(h(n))  
若n^log b (a)> O(h(n)) ：该方法的复杂度为  O(n^log b (a))  
通过计算可以得知n^log2(2)=O(cn),所以时间复杂度为`O(nlgn)`。